{
  "hash": "2a8340d65d39fffc4c5a17d53474b546",
  "result": {
    "markdown": "---\nexecute:\n  eval: false\nformat:\n  html:\n    link-external-newwindow: true\n---\n\n# 3D Chromatin Organization\n\nHi-C is a method to capture chromatin contacts genome-wide. Read through the resources for more background. Micro-C is very similar except it does not use a restriction enzyme, leading to better capture. Most analysis are the same for both and I will point out where they differ.\n\n## Resources\n\n[Comparative study on chomatin loop callers](https://www.biorxiv.org/content/10.1101/2023.11.24.567971v1)\n\n## Processing\n\nWe have processed all our samples with [runHiC](https://github.com/XiaoTaoWang/HiC_pipeline) from Feng Yue's lab as that was my committee member and expert on HiC. Many people use HiC-Pro but I have tested it and it is much slower. The one time I tried nf-core's [HiC pipeline](https://nf-co.re/hic/2.1.0) for Micro-C, it failed.\n\nEach sample will require it's own folder, with this structure.\n\n| sample\n|         data\n|                 hg38\n|                 HiC-gzip\n|         workspace\n|                 datasets.tsv\n\nAll fastq files will be in HiC-gzip, with \\_R1.fastq.gz and \\_R2.fastq.gz changed to \\_1.fastq.gz and \\_2.fastq.gz. I haven't found a workaround to avoid the renaming. The datasets.tsv, technical replicates and biological doesn't really matter but if you want the end file to combine everything, add rep1, rep2 per pair of fastq files so the final resulting file will be denoted allReps. Do `runHiC quality` to get a sense of how well the experiment worked after shallow sequencing.\n\n## Downstream analysis\n\nMany of these have many tools available to call them. I have attempted to choose the most well-supported tools in the same ecosystem to avoid unnecessary format changes and hidden mistakes. I ended up with the Open2C ecosystem's [cooltools](https://cooltools.readthedocs.io/en/latest/) and many of Dr. Feng Yue's lab's tools.\n\n### A/B Compartments\n\nI'm following the cooltools [compartments tutorial](https://cooltools.readthedocs.io/en/latest/notebooks/compartments_and_saddles.html).\\\nCompartments are not comparable between cell types if done using PCA. You can use [cscore](https://github.com/scoutzxb/CscoreTool) if a more robust definition is needed. However, the PCA definition is currently still widely used. For this, you need too calculate expected values first and you should output those as a tsv because you'll need it for other analysis.\n\n\n\n```{bash}\nlucap_35cr_cis_eigs = cooltools.eigs_cis(\n                        lucap_35cr,\n                        gc_cov,\n                        n_eigs=3,\n                        )\nlucap_35cr_eigenvector_track = lucap_35cr_cis_eigs[1][['chrom','start','end','E1']]\n```\n\n\n\n### Topological Associating Domain\n\nThere are many TAD calling tools and most of them do not have a great degree of overlap. I chose the insulation score methods in [cooltools](https://cooltools.readthedocs.io/en/latest/notebooks/insulation_and_boundaries.html).\n\nCreating TADs from insulation scores <https://github.com/open2c/cooltools/issues/453>.\n\n\n\n```{bash}\nwindows = [3*resolution, 5*resolution, 10*resolution, 25*resolution]\nsamples = {\"LuCaP70CR\" : lucap70cr_insulation_table, \n           \"LuCaP77CR\" : lucap77cr_insulation_table,\n          \"LuCaP1451\" : lucap1451_insulation_table}\nfor window in windows:\n    for table_name, table in samples.items():\n        print(\"sample\", table_name, \"at\", window)\n        insul = table[[\"chrom\", \"start\", \"end\", f\"log2_insulation_score_{window}\"]]\n        insul.to_csv(f\"results_{window}/{table_name}_insulation_scores_{window}.bed\", header=False, index=False, sep=\"\\t\")\n        \n        tads = bioframe.merge(table[table[f\"is_boundary_{window}\"] == False])\n        tads = tads[(tads[\"end\"] - tads[\"start\"]) <= 1500000].reset_index(drop=True) # dropping large tads\n        tads.to_csv(f\"results_{window}/{table_name}_TADs_{window}.bed\", header=False, index=False, sep=\"\\t\")\n\n```\n\n\n\n### Loops\n\n#### Mustache\n\nUse mustache for loop calls of individual samples, and diffMustache for pair-wise comparisons. The default d for diffMustache is 2,000,000bp. Call at various cut-offs with `-pt2` and decide on a reasonable number of loops.\n\n#### Working with loops\n\nhomer [merge2Dbed.pl](http://homer.ucsd.edu/homer/interactions2/HiCTADsAndLoops.html) will combine seperate loop calls (also TADs if specified in parameter) that are at adjacent pixels (or within distance specified) into a big loop. This will also produce condition specific loops that are just based on coordinates, not statistical difference.\n\nCurrently, I'm using [LoopRig](https://cran.r-project.org/web/packages/LoopRig/index.html) as the underlying data structure for working with bedpe files. It's really just 2 Granges objects linked together and I've re-written many of their functions. It's most likely unnecessary to use this package.\n\n### APA\n\nThere are also many implementations of APA calculation. I use [coolpup.py](https://github.com/open2c/coolpuppy), an extension of `cooltools pileup`.\n\n## HiGlass\n\nYou either start with a local installation of Docker, or use the online browser at resgen. They have some slight differences.\\\nFor HiGlass, you need to ingest most files in a two-step manner, whereas with resgen you can directly upload them (with the exception of TADs). It's better to write scripts to facilitate and automate the ingestion.\\\nThe files will not line up perfect with the heat maps due to how HiGlass interprets coordinates. See <https://github.com/higlass/higlass/issues/1051>. Since HiGlass doesn't have a notion of a genomic assembly, you need to ingest a chromosome size file once when you start.\n\n### Docker\n\nInstall docker following these [instructions](https://github.com/higlass/higlass-docker).\\\nTo view HiGlass on docker locally, start the docker app, run `higlass-manage start` on your terminal. Go to <http://localhost:8989/app> to see the browser. Deletion of ingested tracks needs access to the superuser via <http://localhost:8989/admin/>. Once data is ingested, it's kept at a different location and you can usually delete the original files in your local computer to save space.\n\n### Resgen\n\nYou can create separate projects. Files uploaded needs to be manually tagged. Most important are `assembly:hg38`, `datatype`, and `filetype`. To use gene search, both chromosome info and gene annotations need to be added to the panel using the search bar.\n\n### Navigating HiGlass\n\nYou need to be able to reproduce each view so you won't have to start from scatch each time. In Docker, you save the View Configs files manually. In resgen, you can save a view.\n\nWhile the GUI is sufficient, some things are faster and easier changed via the view configs.\\\nTo change 1D scales, <https://github.com/higlass/higlass/issues/946>.\n\n### Ingesting files specifications\n\nInstructions can be found [here](https://docs.higlass.io/) but it's sparse and somewhat confusing so I'm including common use cases.\n\nAfter aggregation (whether that's needed depends on the filetype), ingest files like this with appropriate tags.\n\n\n\n```{bash}\nhiglass-manage ingest file --filetype bed2ddb --datatype 2d-rectangle-domains --project-name $3 --assembly hg38\n```\n\n\n\n#### mcool\n\nThe .mcool files themselves are easily recognized with just `higlass-manage ingest sample.mcool --assembly hg38`.\n\n#### AB compartments\n\nThese files need to be converted into bigwigs first. They are more well supported than bedgraph files. Use UCSC's bedGraphtoBigWig.\n\n#### TADs\n\nFor resgen, TADs need to be aggregated first, and the aggregated file is uploaded.\n\n\n\n```{bash}\nj=${1%%.*}\n\nclodius aggregate bedpe \\\n    --assembly hg38 \\\n\t--chr1-col 1 --chr2-col 1 \\\n\t--from1-col 2 --to1-col 3 \\\n\t--from2-col 2 --to2-col 3 \\\n    --output-file ${j}.beddb \\\n    $1\n```\n\n\n\nSpecify `track-type:linear-2d-rectangle-domains` and `filetype:bed2ddb` for top section. For viewing in center section `datatype:2d-rectangle-domains`.\n\n#### Loops\n\nLoops view as arcs currently only works on resgen and not the local docker. Loops on the 2D heatmap will work with docker.\n\n### ChIP-Seq and ATAC-Seq tracks\n\nThese are just bigwig ingestion.\n\n",
    "supporting": [
      "3D_files/figure-pdf"
    ],
    "filters": []
  }
}
{
  "hash": "e9b6cb14e8e4c3944f6323772b9d8eca",
  "result": {
    "markdown": "---\nexecute:\n  eval: false\nformat:\n  html:\n    link-external-newwindow: true\n---\n\n\n# Functional Analysis\n\nWhat do do once you have a list of genes?\n\n## Gene name conversions\n\nGetting genomic coordinates from a list of gene names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nensembl <- useEnsembl(biomart = \"ensembl\", dataset=\"hsapiens_gene_ensembl\", version = 86)\nchr <- c(seq(1,22), \"X\", \"Y\")\n\ngene_coor <- getBM(attributes = c(\"hgnc_symbol\", \"chromosome_name\", \"start_position\", \"end_position\"), \n                    filters = \"hgnc_symbol\", values = rownames(res_sh_vs_ctrl), mart = ensembl,\n                    useCache = FALSE)\n# patched chromosomes are coming up, therefore not unique, need to filter out\ngene_coor <- gene_coor[gene_coor$chromosome_name %in% chr,]\n```\n:::\n\n\nThere are many ways of doing this, they're all slightly different depending on the database.\n\n## Enrichment Analysis {#sec-enrichment}\n\nMany of the functional analysis is achieved using [ClusterProfiler](https://bioconductor.org/packages/release/bioc/html/clusterProfiler.html). While the [vignette](https://yulab-smu.top/biomedical-knowledge-mining-book/enrichment-overview.html) is very comprehensive, it can be overwhelming to see which functions are useful, so I will point out the most useful ones here.\n\n### Overrepresention Analysis (ORA)\n\nA very good [explanation](https://twitter.com/mdziemann/status/1626407797939384320) and accompanying [paper](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1009935) of why we need background lists. Which genes to use for backgrounds? Check [this](https://www.biostars.org/p/9514932/#9515107).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngenes <- as.data.frame(peakAnno)$geneId # get the genes from peak annotation\n\ngeneUniverse <- rownames(res_lrt) # all genes that were tested for significance\ngo <- enrichGO (gene = genes,\n          keyType = \"SYMBOL\",\n          universe = geneUniverse,\n          ont = \"BP\",\n          OrgDb = org.Hs.eg.db,\n          qvalueCutoff = 0.05)\n\n\ngo_simplified <- simplify(go) # to get rid of redundant GO terms\n```\n:::\n\n\nTo wrap long labels into a few lines\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndotplot(go) + scale_y_discrete(labels = function(x) str_wrap(x, width = 30)) + ggtitle(\"\")  + \n  theme(plot.title = element_text(hjust = 0.5))\n```\n:::\n\n\nTo use KEGG, you need to convert gene symbols to entrezid or use the geneId column from annotatePeaks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeg_list_entrez <- lapply(deg_list, function(x) {\n  mapIds(org.Hs.eg.db, rownames(x), \"ENTREZID\", \"SYMBOL\")\n})\nkegg <- enrichKEGG(gene = deg_list_entrez$up, organism = \"hsa\")\n```\n:::\n\n\nOr use bit_kegg <https://guangchuangyu.github.io/2016/05/convert-biological-id-with-kegg-api-using-clusterprofiler/>. I have not tried this method yet.\n\n### Gene Set Enrichment Analysis (GSEA)\n\nExplanation of GSEA and how to do it in R <https://sbc.shef.ac.uk/workshops/2019-01-14-rna-seq-r/rna-seq-gene-set-testing.nb.html>.\\\nHow I first did it <https://stephenturner.github.io/deseq-to-fgsea/>.\n\nI rank the genes by the stat column. For the Wald test, stat is the Wald statistic: the log2FoldChange divided by lfcSE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nranked_genes <- degenes %>% as.data.frame() %>% rownames_to_column(\"symbol\") %>% dplyr::select(symbol, stat)\nranked_genes <- ranked_genes %>% arrange(-stat) %>% deframe()\n```\n:::\n\n\nWe usually perform GSEA with the Molecular Signature Database and there is a package for easy retrieval.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(msigdbr)\nh <- msigdbr(species = \"Homo sapiens\", category = \"H\") %>% \n  dplyr::select(gs_name, gene_symbol)\ngsea <- GSEA(ranked_genes, TERM2GENE = h)\nridgeplot(gsea)\nenrichplot::gseaplot2(gsea, geneSetID = \"HALLMARK_\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{"title":"Bulk Analysis","markdown":{"yaml":{"execute":{"eval":false},"format":{"html":{"link-external-newwindow":true}}},"headingText":"Bulk Analysis","headingAttr":{"id":"sec-Bulk_Analysis","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\nThis chapter is for the downstream analysis of the most common bulk NGS experiments we perform. For functional analysis that are common to all these methods, see next chapter.\n\n## RNA-Seq\n\nWhile RPKM has some issues and is not the most correct quantification, for basic comparison, this is good enough to share with biologists. The nf-core pipeline will provide this value by default.\n\n### Differential Gene Expression\n\nOne of the most basic and common analysis on RNA-Seq. We use DESeq2 and their well documented [vignette](https://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html) is worth reading from start to end for the beginner.\n\n::: callout-note\nWhile our pipeline originally used the `STAR --quantMode` to quantify genes, with switching to nf-core, we are also switching to [STAR](https://github.com/alexdobin/STAR/blob/master/doc/STARmanual.pdf) alignment followed by [RSEM](https://github.com/deweylab/RSEM) quantification.\n:::\n\n```{r}\nlibrary(tidyverse)\n\nfiles <- list.files(path = \"./working_dir\", pattern = \"*genes.results$\", full.names = TRUE)\nrsem_results <- lapply(files, read_delim)\nexpected_counts_list <- lapply(rsem_results, function(x) { x$expected_count })\nexpected_counts <- do.call(cbind, expected_counts_list) %>% as.data.frame()\n```\n\nRSEM produces non-integer counts, and we can by-pass that by using `round()`. Alternatively, you can use [tximport](https://bioconductor.org/packages/devel/bioc/vignettes/tximport/inst/doc/tximport.html) to read the files in.\n\n```{r}\nexpected_counts <- round(expected_counts) \nrownames(expected_counts) <- rsem_results[[1]]$gene_id\ncolnames(expected_counts) <- stringr::str_extract(files, \"mr\\\\d+\") # our RNA-seq samples usually start with MR\n\nsampleTable <- data.frame(condition = factor(rep(c(\"control\", \"knockdown\"), each = 3)),\n                          replicate = factor(rep(seq(1,3))))\nrownames(sampleTable) <- colnames(expected_counts)\n```\n\n**DESeq2**\n\n```{r}\ndds <- DESeqDataSetFromMatrix(expected_counts, sampleTable, design = ~condition)\nkeep <- rowSums(counts(dds)) > 10\ndds <- dds[keep,]\ndds <- DESeq(dds)\nres <- results(dds, alpha = 0.01)\nsummary(res)\n```\n\nDifference between rlog, vst and lfcShrink <https://support.bioconductor.org/p/104615/>.\n\n**Plotting PCs**\n\nDESeq2's `plotPCA()` function will plot the top 500 most variable genes. The chunk below will plot all genes.\n\n```{r}\ndegenes <- res %>% subset(padj < 0.01)\ndds_rlog <- rlog(dds)\npca_data <- t(assay(dds_rlog)) %>% prcomp()\nautoplot(pca_data, data = sampleTable, colour = \"condition\") + \n  geom_text_repel(label = rownames(sampleTable))\nrlog_de <- assay(dds_rlog) %>% subset(rownames(dds_rlog) %in% rownames(degenes))\nrlog_de_scaled <- t(scale(t(rlog_de)))\n```\n\nAfter getting DEGs, you'd want to group the genes into biological functions. See @sec-enrichment for Over representation analysis (ORA) with GO and KEGG terms as well as Gene Set Enrichment Analysis (GSEA) with ranked genes.\n\n### Deciding Groups and Plotting\n\nWhile you can use k-means manually to get seperate groups, [ComplexHeatmap](https://jokergoo.github.io/ComplexHeatmap-reference/book/index.html) allows you to do so with more [flexiblity](https://jokergoo.github.io/ComplexHeatmap-reference/book/a-single-heatmap.html#heatmap-split) and get visualizations as well.\n\n```{r}\nmat_colors <- list(\n  replicate = c(brewer.pal(3, \"Accent\")),\n  condition = c(brewer.pal(6, \"Set1\")))\nnames(mat_colors$replicate) <- unique(sampleTable$replicate)\nnames(mat_colors$condition) <- sampleTable$condition\n\ncol_anno <- HeatmapAnnotation(df = sampleTable,\n                              which = 'col',\n                              col = mat_colors\n)\n\nhmap <- Heatmap(rlog_de_scaled,\n                   name = \"scaled\",\n                   \n                   # Row Params\n                   show_row_names = FALSE,\n                   row_title_rot=0,\n                   cluster_row_slices = FALSE,\n                   border = TRUE,\n                   row_km = 2, # split rows into 2 groups\n                   \n                   # Column Params\n                   cluster_columns = FALSE,\n                   column_title = \"Rlog Transformed Expression for all DE genes\",\n                   top_annotation = col_anno)\nhmap <- draw(hmap) # assigning so that k-means is only called once\nrow_order(hmap) # grab the different groups in rows\n```\n\nSee [here](https://jokergoo.github.io/ComplexHeatmap-reference/book/a-single-heatmap.html#get-orders-and-dendrograms-from-heatmap) for why we assign `draw()`.\n\n## ChIP-Seq and ATAC-Seq\n\n### Spike-in normalization\n[Guidelines](https://www.activemotif.com/documents/1977.pdf) on spike-in normalization from ActiveMotif.\n\n1. Perform ChIP combining the Spike-in Chromatin, Spike-in Antibody, test chromatin and test antibody into the same tube for immunoprecipitation. We suggest using the guidelines provided for chromatin and antibody quantities based on the antibody target.\n2. Follow ChIP with Next-Generation Sequencing.\n3. Map ChIP-seq data to the test reference genome (e.g. human, mouse or other).\n4. Map ChIP-seq data to the Drosophila reference genome.\n5. Count uniquely aligning Drosophila sequence tags and identify the sample containing the least number of tags.\n6. Compare Drosophila tag counts from other samples to the sample containing the least tags and generate a normalization factor for\neach comparison.\n (Sample 1 with lowest tag count / Sample 2) = Normalization factor\n7. Downsample the tag counts of data sets proportional to the normalization factor determined\n\n### Peak calling\n\nDepending on if you use the nfcore's pipeline or your own, you will have to call peaks. I use MACS2 and here are some details I've gathered.\\\n<https://github.com/crazyhottommy/ChIP-seq-analysis/blob/master/part1.3_MACS2_peak_calling_details.md>\n\nWhy I skip model building <https://github.com/macs3-project/MACS/issues/391>\n\n```{bash}\nmacs2 callpeak -t mxx_sorted.bam --outdir macs/mxx -n mxx -g hs -q 0.01 --nomodel --shift 0 --extsize 250\n```\n\n### Overlapping peaks\n\nAfter MACS2 peak-calling, we may want to see how many peaks overlap in different conditions. Even though it's named [mergePeaks](http://homer.ucsd.edu/homer/ngs/mergePeaks.html), you will be able to get overlapping statistics from this. Be mindful of long path names as mergePeaks will produce errors.\n\n```{bash}\nmergePeaks -d 100 pu1.peaks cebp.peaks -prefix mmm -venn venn.txt\n```\n\n::: callout-tip\nThe -d flag changes the unique peaks to 100 bp each and keep the shared peaks same size.\\\nTo get literal 1bp overlap, just omit -d argument altogether\n:::\n\nThe easiest way to plot this result is with [Vennerable](https://github.com/js229/Vennerable).\n\n```{r}\na <- tot[1]\nb <- tot[2]\nab <- tot[3]\n\nvenn_obj <- createVennObj(nSets = 2, sNames = c(\"m1043\", \"m1044\"), # names in order of first to last\n                     sSizes = c(0, a, b ,ab))\nvp <- plotVenn(nVennObj = venn_obj)\n```\n\nThis gets tedious with more than 2 sets. See code below. You should not make Venn Diagrams with more than 4 sets. An upset plot is better in that scenario.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# 3 sets -----\na <- tot[1]\nb <- tot[2]\nab <- tot[3]\nc <- tot[4]\nac <- tot[5]\nbc <- tot[6]\nabc <- tot[7]\n\n# 4 sets -------\na <- tot[1]\nb <- tot[2]\nab <- tot[3]Ve\nc <- tot[4]\nac <- tot[5]\nbc <- tot[6]\nabc <- tot[7]\nd <- tot[8]\nad <- tot[9]\nbd <- tot[10]\nabd <- tot[11]\ncd <- tot[12]\nacd <- tot[13]\nbcd <- tot[14]\nabcd <- tot[15]\n```\n\nThis is a more automated way of reading in the data, here using 4 sets as an example.\n\n```{r}\nvenn <- read.table(\"results/output_nepc.bedpe\", header = TRUE, sep = \"\\t\")\nvenn$alpha <- apply(venn, 1, function(x) {\n  sets <- c(\"A\", \"B\", \"C\", \"D\")\n  selected_sets <- sets[which(x == \"X\")]\n  paste(selected_sets, collapse = \"\")\n})\n\norder_vector <- c(\"0\", \"A\", \"B\", \"AB\", \"C\", \"AC\", \"BC\", \"ABC\", \"D\", \"AD\", \"BD\", \"ABD\", \"CD\", \"ACD\", \"BCD\", \"ABCD\")\n\nvenn$alpha <- factor(venn$alpha, levels = order_vector)\n\n# Sort the data frame based on the factor levels\nvenn <- venn[order(venn$alpha), ]\nvenn_plot <- Venn(SetNames = c(\"93\", \"145.1\", \"145.2\", \"nci\"), \n                  Weight = c(0, venn$Features))\nplot(venn_plot, type = \"ellipses\")\n```\n\nCreating upset plots <https://github.com/hms-dbmi/UpSetR>\n\n```{r}\nlibrary(UpSetR)\nvenn$Sets <- apply(venn[, -1], 1, function(x) {\n  sets <- colnames(venn)[2:17]\n  selected_sets <- sets[which(x == \"X\")]\n  paste(selected_sets, collapse = \"&\")\n})\n\nupset_input <- c(venn$Features)\nnames(upset_input) <- venn$Sets\nupset(fromExpression(upset_input), nsets = 16, nintersects = 100, number.angles = 45)\n```\n\nA sample script to automate this process. I haven't incorporated the above part into this script.\n\n```{bash filename=\"mergePeaksandplot.sh\"}\n#| eval: false\nmodule load homer/4.10\nmodule load R/4.0.3\nmergePeaks control_peaks.narrowPeak purturbed_peaks.narrowPeak -prefix ov -venn venn.txt\n# n_way script, venn.txt, last sample label, middle samples label, first sample label, txt file name (no extension)\nRscript --vanilla venn2way.R venn.txt purturbed control venn\n```\n\nThe accompanying R file:\n\n```{r filename=\"venn2way.R\"}\n#| eval: false\n\nlibrary(Vennerable)\n\nargs <- commandArgs(trailingOnly = TRUE)\n\nvenn <- read.table(args[1], header = TRUE, sep = \"\\t\")\ntot <- venn[[Total]]\n\na <- tot[1]\nb <- tot[2]\nab <- tot[3]\n\nvenner <- Venn(SetNames = c(args[3], args[2]), # opposite labelling to nVennR, going from last sample to first\n               Weight = c(0, b, a, ab))\npng(paste0(args[4], \".png\"))\nplot(venner)\ndev.off()\n```\n\nTo make Venn Diagrams that are more accurately weighted, use [nVennR](https://cran.r-project.org/web/packages/nVennR/index.html). Sadly, it looks like it's been removed from CRAN since the last time I've installed it.\n\nIf you have replicates, overlapping peaks can be obtained via packages like [MAnorm2](https://cran.r-project.org/web/packages/MAnorm2/index.html). Read more about dealing with replicates [here](https://ro-che.info/articles/2018-07-11-chip-seq-consensus).\n\n### Motif Enrichment\n\nHomer `mergePeaks` is able to take the narrowPeaks format as input, but if you're doing homer `mergePeaks` first and then `findMotifs`, you need to change the Homer `mergePeaks` output to exclude the header line first. This also applies to deepTools heatmaps.\n\n```{bash}\nfindMotifsGenome.pl peak_or_bed /projects/p20023/Viriya/software/Homer4.10/data/genomes/hg38/ output_dir -size 200 \n```\n\n-size 200 is the default, and is calculated from the center of the peaks. If your peaks are bigger and you wish to use the entire region, use `-size given`. However, when the regions are too large, motifs will not be significantly enriched.\n\n### Plotting Heatmaps\n\nHere I'm showing a sample [deepTools](https://deeptools.readthedocs.io/en/latest/) script to plot heatmaps. First you need bigwig files. `bamCoverage` offers normalization by scaling factor, Reads Per Kilobase per Million mapped reads (RPKM), counts per million (CPM), bins per million mapped reads (BPM) and 1x depth (reads per genome coverage, RPGC).\n\n```{bash}\nbamCoverage --bam m${i}_sorted.bam --outFileName m${i}.bw --normalizeUsing CPM \\\n--extendReads 200 --numberOfProcessors 6 --binSize 20\n```\n\nI find having paths defined at the top of the script makes it less likely to have mistakes.\n\n```{bash}\nday3=\"m1015_1055_hg38/foxa2/CPM\"\nnci=\"m1015_1055_hg38/CPM\"\nchip=\"../Viriya/analysis/foxa2/chip-seq\"\n\ncomputeMatrix reference-point --referencePoint center -S \\\n$day3/m674.bw $day3/m676.bw $tf/m914.bw $tf/m921.bw $nci/m1043.bw $nci/m1044.bw \\\n-R $chip/clustering/output/1.bed \\\n$chip/clustering/output/2.bed \\\n$chip/clustering/output/3.bed \\\n$chip/clustering/output/4.bed \\\n-a 3000 -b 3000 -o $chip/heatmaps/scaled_FOXA2_sites.npz \\\n--samplesLabel m674 m676 m914 m921 m1043 m1044 \\\n-p max --blackListFileName $chip/ENCFF356LFX.bed.gz\n\nplotHeatmap -m $chip/FOXA2_6_samples/heatmaps/scaled_FOXA2_sites.npz \\\n-o $chip/FOXA2_6_samples/heatmaps/scaled_FOXA2_sites.pdf \\\n--colorMap Blues\n\n```\n\n`--sortUsingSamples` is not 0 indexed. 1st sample is 1. `--sortUsingSamples` is also usable in plotHeatmap so we can save that to there for more flexible plotting.\n\n`--regionsLabel`: \"xxx binding sites n=2390\" put it in quotes if you don't want to key in escape too many times\n\n`--sampleLabels`: if you're sure you're not going to change any labels, put it in makeheatmap step because fewer things to type when redoing the heatmap multiple times due to scaling etc, therefore fewer mistakes. otherwise put it in plotHeatmap.\n\nIn legends: \"Pol II\" spaces and parantheses need to be escaped, but not + signs.\n\nUse BED6 format annd not the BED3 if you care about strandedness <https://github.com/deeptools/deepTools/issues/886>.\n\nTo get sorted output bed files, use the `--sortedOutRegions` at the plotHeatmap step, not computeMatrix.\\\nUse `--clusterUsingSamples` for a more robust delineation.\n\n### Genomic Annotation\n\n[ChIPSeeker](https://bioconductor.org/packages/release/bioc/html/ChIPseeker.html)\n\n```{r}\nlibrary(org.Hs.eg.db)\nlibrary(TxDb.Hsapiens.UCSC.hg38.knownGene)\n\npromoter <- getPromoters(TxDb=txdb, upstream=3000, downstream=3000)\n\nmxxx <- readPeakFile(\"/path_to_narrowPeak/mxxx_peaks.narrowPeak\")\ntagMatrix <- getTagMatrix(mxxx, windows = promoter) # usually needs an interactive job\npeakAnno <- annotatePeak(mxxx, tssRegion = c(-3000,3000), TxDb = txdb, annoDb = \"org.Hs.eg.db\")\nplotAnnoPie(peakAnno, main = \"mxxx\", line = -6)\nvennpie(peakAnno, r = 0.1)\nupsetplot(peakAnno) + ggtitle(\"mxxx\")\nplotAnnoBar(peakAnno)\n```\n\n`annotatePeak` will default to chosing one gene per region. This is fine for small binding sites but for larger regions use `seq2gene` as it will map genomic regions in a many-to-many manner.\n","srcMarkdownNoYaml":"\n\n# Bulk Analysis {#sec-Bulk_Analysis}\n\nThis chapter is for the downstream analysis of the most common bulk NGS experiments we perform. For functional analysis that are common to all these methods, see next chapter.\n\n## RNA-Seq\n\nWhile RPKM has some issues and is not the most correct quantification, for basic comparison, this is good enough to share with biologists. The nf-core pipeline will provide this value by default.\n\n### Differential Gene Expression\n\nOne of the most basic and common analysis on RNA-Seq. We use DESeq2 and their well documented [vignette](https://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html) is worth reading from start to end for the beginner.\n\n::: callout-note\nWhile our pipeline originally used the `STAR --quantMode` to quantify genes, with switching to nf-core, we are also switching to [STAR](https://github.com/alexdobin/STAR/blob/master/doc/STARmanual.pdf) alignment followed by [RSEM](https://github.com/deweylab/RSEM) quantification.\n:::\n\n```{r}\nlibrary(tidyverse)\n\nfiles <- list.files(path = \"./working_dir\", pattern = \"*genes.results$\", full.names = TRUE)\nrsem_results <- lapply(files, read_delim)\nexpected_counts_list <- lapply(rsem_results, function(x) { x$expected_count })\nexpected_counts <- do.call(cbind, expected_counts_list) %>% as.data.frame()\n```\n\nRSEM produces non-integer counts, and we can by-pass that by using `round()`. Alternatively, you can use [tximport](https://bioconductor.org/packages/devel/bioc/vignettes/tximport/inst/doc/tximport.html) to read the files in.\n\n```{r}\nexpected_counts <- round(expected_counts) \nrownames(expected_counts) <- rsem_results[[1]]$gene_id\ncolnames(expected_counts) <- stringr::str_extract(files, \"mr\\\\d+\") # our RNA-seq samples usually start with MR\n\nsampleTable <- data.frame(condition = factor(rep(c(\"control\", \"knockdown\"), each = 3)),\n                          replicate = factor(rep(seq(1,3))))\nrownames(sampleTable) <- colnames(expected_counts)\n```\n\n**DESeq2**\n\n```{r}\ndds <- DESeqDataSetFromMatrix(expected_counts, sampleTable, design = ~condition)\nkeep <- rowSums(counts(dds)) > 10\ndds <- dds[keep,]\ndds <- DESeq(dds)\nres <- results(dds, alpha = 0.01)\nsummary(res)\n```\n\nDifference between rlog, vst and lfcShrink <https://support.bioconductor.org/p/104615/>.\n\n**Plotting PCs**\n\nDESeq2's `plotPCA()` function will plot the top 500 most variable genes. The chunk below will plot all genes.\n\n```{r}\ndegenes <- res %>% subset(padj < 0.01)\ndds_rlog <- rlog(dds)\npca_data <- t(assay(dds_rlog)) %>% prcomp()\nautoplot(pca_data, data = sampleTable, colour = \"condition\") + \n  geom_text_repel(label = rownames(sampleTable))\nrlog_de <- assay(dds_rlog) %>% subset(rownames(dds_rlog) %in% rownames(degenes))\nrlog_de_scaled <- t(scale(t(rlog_de)))\n```\n\nAfter getting DEGs, you'd want to group the genes into biological functions. See @sec-enrichment for Over representation analysis (ORA) with GO and KEGG terms as well as Gene Set Enrichment Analysis (GSEA) with ranked genes.\n\n### Deciding Groups and Plotting\n\nWhile you can use k-means manually to get seperate groups, [ComplexHeatmap](https://jokergoo.github.io/ComplexHeatmap-reference/book/index.html) allows you to do so with more [flexiblity](https://jokergoo.github.io/ComplexHeatmap-reference/book/a-single-heatmap.html#heatmap-split) and get visualizations as well.\n\n```{r}\nmat_colors <- list(\n  replicate = c(brewer.pal(3, \"Accent\")),\n  condition = c(brewer.pal(6, \"Set1\")))\nnames(mat_colors$replicate) <- unique(sampleTable$replicate)\nnames(mat_colors$condition) <- sampleTable$condition\n\ncol_anno <- HeatmapAnnotation(df = sampleTable,\n                              which = 'col',\n                              col = mat_colors\n)\n\nhmap <- Heatmap(rlog_de_scaled,\n                   name = \"scaled\",\n                   \n                   # Row Params\n                   show_row_names = FALSE,\n                   row_title_rot=0,\n                   cluster_row_slices = FALSE,\n                   border = TRUE,\n                   row_km = 2, # split rows into 2 groups\n                   \n                   # Column Params\n                   cluster_columns = FALSE,\n                   column_title = \"Rlog Transformed Expression for all DE genes\",\n                   top_annotation = col_anno)\nhmap <- draw(hmap) # assigning so that k-means is only called once\nrow_order(hmap) # grab the different groups in rows\n```\n\nSee [here](https://jokergoo.github.io/ComplexHeatmap-reference/book/a-single-heatmap.html#get-orders-and-dendrograms-from-heatmap) for why we assign `draw()`.\n\n## ChIP-Seq and ATAC-Seq\n\n### Spike-in normalization\n[Guidelines](https://www.activemotif.com/documents/1977.pdf) on spike-in normalization from ActiveMotif.\n\n1. Perform ChIP combining the Spike-in Chromatin, Spike-in Antibody, test chromatin and test antibody into the same tube for immunoprecipitation. We suggest using the guidelines provided for chromatin and antibody quantities based on the antibody target.\n2. Follow ChIP with Next-Generation Sequencing.\n3. Map ChIP-seq data to the test reference genome (e.g. human, mouse or other).\n4. Map ChIP-seq data to the Drosophila reference genome.\n5. Count uniquely aligning Drosophila sequence tags and identify the sample containing the least number of tags.\n6. Compare Drosophila tag counts from other samples to the sample containing the least tags and generate a normalization factor for\neach comparison.\n (Sample 1 with lowest tag count / Sample 2) = Normalization factor\n7. Downsample the tag counts of data sets proportional to the normalization factor determined\n\n### Peak calling\n\nDepending on if you use the nfcore's pipeline or your own, you will have to call peaks. I use MACS2 and here are some details I've gathered.\\\n<https://github.com/crazyhottommy/ChIP-seq-analysis/blob/master/part1.3_MACS2_peak_calling_details.md>\n\nWhy I skip model building <https://github.com/macs3-project/MACS/issues/391>\n\n```{bash}\nmacs2 callpeak -t mxx_sorted.bam --outdir macs/mxx -n mxx -g hs -q 0.01 --nomodel --shift 0 --extsize 250\n```\n\n### Overlapping peaks\n\nAfter MACS2 peak-calling, we may want to see how many peaks overlap in different conditions. Even though it's named [mergePeaks](http://homer.ucsd.edu/homer/ngs/mergePeaks.html), you will be able to get overlapping statistics from this. Be mindful of long path names as mergePeaks will produce errors.\n\n```{bash}\nmergePeaks -d 100 pu1.peaks cebp.peaks -prefix mmm -venn venn.txt\n```\n\n::: callout-tip\nThe -d flag changes the unique peaks to 100 bp each and keep the shared peaks same size.\\\nTo get literal 1bp overlap, just omit -d argument altogether\n:::\n\nThe easiest way to plot this result is with [Vennerable](https://github.com/js229/Vennerable).\n\n```{r}\na <- tot[1]\nb <- tot[2]\nab <- tot[3]\n\nvenn_obj <- createVennObj(nSets = 2, sNames = c(\"m1043\", \"m1044\"), # names in order of first to last\n                     sSizes = c(0, a, b ,ab))\nvp <- plotVenn(nVennObj = venn_obj)\n```\n\nThis gets tedious with more than 2 sets. See code below. You should not make Venn Diagrams with more than 4 sets. An upset plot is better in that scenario.\n\n```{r}\n#| code-fold: true\n#| code-summary: \"Show the code\"\n# 3 sets -----\na <- tot[1]\nb <- tot[2]\nab <- tot[3]\nc <- tot[4]\nac <- tot[5]\nbc <- tot[6]\nabc <- tot[7]\n\n# 4 sets -------\na <- tot[1]\nb <- tot[2]\nab <- tot[3]Ve\nc <- tot[4]\nac <- tot[5]\nbc <- tot[6]\nabc <- tot[7]\nd <- tot[8]\nad <- tot[9]\nbd <- tot[10]\nabd <- tot[11]\ncd <- tot[12]\nacd <- tot[13]\nbcd <- tot[14]\nabcd <- tot[15]\n```\n\nThis is a more automated way of reading in the data, here using 4 sets as an example.\n\n```{r}\nvenn <- read.table(\"results/output_nepc.bedpe\", header = TRUE, sep = \"\\t\")\nvenn$alpha <- apply(venn, 1, function(x) {\n  sets <- c(\"A\", \"B\", \"C\", \"D\")\n  selected_sets <- sets[which(x == \"X\")]\n  paste(selected_sets, collapse = \"\")\n})\n\norder_vector <- c(\"0\", \"A\", \"B\", \"AB\", \"C\", \"AC\", \"BC\", \"ABC\", \"D\", \"AD\", \"BD\", \"ABD\", \"CD\", \"ACD\", \"BCD\", \"ABCD\")\n\nvenn$alpha <- factor(venn$alpha, levels = order_vector)\n\n# Sort the data frame based on the factor levels\nvenn <- venn[order(venn$alpha), ]\nvenn_plot <- Venn(SetNames = c(\"93\", \"145.1\", \"145.2\", \"nci\"), \n                  Weight = c(0, venn$Features))\nplot(venn_plot, type = \"ellipses\")\n```\n\nCreating upset plots <https://github.com/hms-dbmi/UpSetR>\n\n```{r}\nlibrary(UpSetR)\nvenn$Sets <- apply(venn[, -1], 1, function(x) {\n  sets <- colnames(venn)[2:17]\n  selected_sets <- sets[which(x == \"X\")]\n  paste(selected_sets, collapse = \"&\")\n})\n\nupset_input <- c(venn$Features)\nnames(upset_input) <- venn$Sets\nupset(fromExpression(upset_input), nsets = 16, nintersects = 100, number.angles = 45)\n```\n\nA sample script to automate this process. I haven't incorporated the above part into this script.\n\n```{bash filename=\"mergePeaksandplot.sh\"}\n#| eval: false\nmodule load homer/4.10\nmodule load R/4.0.3\nmergePeaks control_peaks.narrowPeak purturbed_peaks.narrowPeak -prefix ov -venn venn.txt\n# n_way script, venn.txt, last sample label, middle samples label, first sample label, txt file name (no extension)\nRscript --vanilla venn2way.R venn.txt purturbed control venn\n```\n\nThe accompanying R file:\n\n```{r filename=\"venn2way.R\"}\n#| eval: false\n\nlibrary(Vennerable)\n\nargs <- commandArgs(trailingOnly = TRUE)\n\nvenn <- read.table(args[1], header = TRUE, sep = \"\\t\")\ntot <- venn[[Total]]\n\na <- tot[1]\nb <- tot[2]\nab <- tot[3]\n\nvenner <- Venn(SetNames = c(args[3], args[2]), # opposite labelling to nVennR, going from last sample to first\n               Weight = c(0, b, a, ab))\npng(paste0(args[4], \".png\"))\nplot(venner)\ndev.off()\n```\n\nTo make Venn Diagrams that are more accurately weighted, use [nVennR](https://cran.r-project.org/web/packages/nVennR/index.html). Sadly, it looks like it's been removed from CRAN since the last time I've installed it.\n\nIf you have replicates, overlapping peaks can be obtained via packages like [MAnorm2](https://cran.r-project.org/web/packages/MAnorm2/index.html). Read more about dealing with replicates [here](https://ro-che.info/articles/2018-07-11-chip-seq-consensus).\n\n### Motif Enrichment\n\nHomer `mergePeaks` is able to take the narrowPeaks format as input, but if you're doing homer `mergePeaks` first and then `findMotifs`, you need to change the Homer `mergePeaks` output to exclude the header line first. This also applies to deepTools heatmaps.\n\n```{bash}\nfindMotifsGenome.pl peak_or_bed /projects/p20023/Viriya/software/Homer4.10/data/genomes/hg38/ output_dir -size 200 \n```\n\n-size 200 is the default, and is calculated from the center of the peaks. If your peaks are bigger and you wish to use the entire region, use `-size given`. However, when the regions are too large, motifs will not be significantly enriched.\n\n### Plotting Heatmaps\n\nHere I'm showing a sample [deepTools](https://deeptools.readthedocs.io/en/latest/) script to plot heatmaps. First you need bigwig files. `bamCoverage` offers normalization by scaling factor, Reads Per Kilobase per Million mapped reads (RPKM), counts per million (CPM), bins per million mapped reads (BPM) and 1x depth (reads per genome coverage, RPGC).\n\n```{bash}\nbamCoverage --bam m${i}_sorted.bam --outFileName m${i}.bw --normalizeUsing CPM \\\n--extendReads 200 --numberOfProcessors 6 --binSize 20\n```\n\nI find having paths defined at the top of the script makes it less likely to have mistakes.\n\n```{bash}\nday3=\"m1015_1055_hg38/foxa2/CPM\"\nnci=\"m1015_1055_hg38/CPM\"\nchip=\"../Viriya/analysis/foxa2/chip-seq\"\n\ncomputeMatrix reference-point --referencePoint center -S \\\n$day3/m674.bw $day3/m676.bw $tf/m914.bw $tf/m921.bw $nci/m1043.bw $nci/m1044.bw \\\n-R $chip/clustering/output/1.bed \\\n$chip/clustering/output/2.bed \\\n$chip/clustering/output/3.bed \\\n$chip/clustering/output/4.bed \\\n-a 3000 -b 3000 -o $chip/heatmaps/scaled_FOXA2_sites.npz \\\n--samplesLabel m674 m676 m914 m921 m1043 m1044 \\\n-p max --blackListFileName $chip/ENCFF356LFX.bed.gz\n\nplotHeatmap -m $chip/FOXA2_6_samples/heatmaps/scaled_FOXA2_sites.npz \\\n-o $chip/FOXA2_6_samples/heatmaps/scaled_FOXA2_sites.pdf \\\n--colorMap Blues\n\n```\n\n`--sortUsingSamples` is not 0 indexed. 1st sample is 1. `--sortUsingSamples` is also usable in plotHeatmap so we can save that to there for more flexible plotting.\n\n`--regionsLabel`: \"xxx binding sites n=2390\" put it in quotes if you don't want to key in escape too many times\n\n`--sampleLabels`: if you're sure you're not going to change any labels, put it in makeheatmap step because fewer things to type when redoing the heatmap multiple times due to scaling etc, therefore fewer mistakes. otherwise put it in plotHeatmap.\n\nIn legends: \"Pol II\" spaces and parantheses need to be escaped, but not + signs.\n\nUse BED6 format annd not the BED3 if you care about strandedness <https://github.com/deeptools/deepTools/issues/886>.\n\nTo get sorted output bed files, use the `--sortedOutRegions` at the plotHeatmap step, not computeMatrix.\\\nUse `--clusterUsingSamples` for a more robust delineation.\n\n### Genomic Annotation\n\n[ChIPSeeker](https://bioconductor.org/packages/release/bioc/html/ChIPseeker.html)\n\n```{r}\nlibrary(org.Hs.eg.db)\nlibrary(TxDb.Hsapiens.UCSC.hg38.knownGene)\n\npromoter <- getPromoters(TxDb=txdb, upstream=3000, downstream=3000)\n\nmxxx <- readPeakFile(\"/path_to_narrowPeak/mxxx_peaks.narrowPeak\")\ntagMatrix <- getTagMatrix(mxxx, windows = promoter) # usually needs an interactive job\npeakAnno <- annotatePeak(mxxx, tssRegion = c(-3000,3000), TxDb = txdb, annoDb = \"org.Hs.eg.db\")\nplotAnnoPie(peakAnno, main = \"mxxx\", line = -6)\nvennpie(peakAnno, r = 0.1)\nupsetplot(peakAnno) + ggtitle(\"mxxx\")\nplotAnnoBar(peakAnno)\n```\n\n`annotatePeak` will default to chosing one gene per region. This is fine for small binding sites but for larger regions use `seq2gene` as it will map genomic regions in a many-to-many manner.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"bulk.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["references.bib"],"editor":"visual","theme":"cosmo","code-copy":true},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"bulk.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"editor":"visual","documentclass":"scrreprt"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}